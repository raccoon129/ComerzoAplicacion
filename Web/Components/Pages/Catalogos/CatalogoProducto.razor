@page "/producto"
@using COMMON.Entidades
@using BIZ
@using COMMON.Validadores
@inject DialogService dialogService

<h3>Catálogo de Productos</h3>
<br />
@if (cargando)
{


    <RadzenProgressBar Value="100" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px; width: 100%;" />
}
else
{
    
<div class="d-flex justify-content-between mb-3">
    <RadzenButton Text="Agregar" ButtonStyle="ButtonStyle.Success" Click="@(() => Editar(new producto()))"></RadzenButton>
</div>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="8" AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@productos" ColumnWidth="auto" LogicalFilterOperator="LogicalFilterOperator.Or">

    <Columns>
        <RadzenDataGridColumn Property="id_producto" Title="ID" Width="70px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn Property="nombre_producto" Title="Nombre" Width="200px" />
        <RadzenDataGridColumn Property="descripcion_producto" Title="Descripción" Width="250px" />
        <RadzenDataGridColumn Property="precio_producto" Title="Precio" Width="100px" FormatString="{0:C}" TextAlign="TextAlign.Right" />
        <RadzenDataGridColumn Property="stock_producto" Title="Stock" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn Property="estado_producto" Title="Estado" Width="120px">
            <Template Context="data">
                @{
                    var producto = (producto)data;
                    var estado = estadosProducto.ContainsKey(producto.estado_producto) ? estadosProducto[producto.estado_producto] : producto.estado_producto;

                    <RadzenBadge BadgeStyle="@(producto.estado_producto == "activo" ? BadgeStyle.Success :
                                             producto.estado_producto == "agotado" ? BadgeStyle.Warning : BadgeStyle.Danger)"
                                  Text="@estado" />
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Acciones" Width="120px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <RadzenButton Click="@(() => Editar((producto)data))" ButtonStyle="ButtonStyle.Warning" Icon="edit" Size="ButtonSize.Small" />
                <RadzenButton Click="@(() => Eliminar((producto)data))" ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" class="ms-1" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

}
@code {
    ProductoManager productoManager;
    List<producto> productos;
    Dictionary<string, string> estadosProducto;
    private bool cargando = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        productoManager = new ProductoManager(new productoValidator());

        estadosProducto = new Dictionary<string, string>();
        estadosProducto.Add("activo", "Disponible");
        estadosProducto.Add("agotado", "Agotado");
        estadosProducto.Add("descontinuado", "Descontinuado");

        ActualizarTabla();
    }

    protected async void ActualizarTabla()
    {
        cargando = true;
        productos = await productoManager.ObtenerTodos();
        cargando = false;
        await InvokeAsync(StateHasChanged);
    }

    protected async Task Editar(producto producto)
    {
        string titulo = producto.id_producto == 0 ? "Nuevo Producto" : $"Editar {producto.nombre_producto}";

        // Creamos una copia local para trabajar en el diálogo
        var productoEdicion = new producto
        {
            id_producto = producto.id_producto,
            nombre_producto = producto.nombre_producto,
            descripcion_producto = producto.descripcion_producto,
            precio_producto = producto.precio_producto,
            stock_producto = producto.stock_producto,
            estado_producto = producto.estado_producto,
            notas_producto = producto.notas_producto
        };

        var result = await dialogService.OpenAsync(titulo, ds => @<RadzenStack Gap="1.5rem">
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Nombre del Producto</label>
                        <RadzenTextBox @bind-Value="productoEdicion.nombre_producto" class="w-100"></RadzenTextBox>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Precio</label>
                            <RadzenNumeric @bind-Value="productoEdicion.precio_producto" TValue="decimal" class="w-100"></RadzenNumeric>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Stock</label>
                            <RadzenNumeric @bind-Value="productoEdicion.stock_producto" TValue="int" class="w-100"></RadzenNumeric>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Estado</label>
                        <RadzenDropDown @bind-Value="productoEdicion.estado_producto"
                                       Data="@estadosProducto"
                                       TValue="string"
                                       TextProperty="Value"
                                       ValueProperty="Key"
                                       class="w-100">
                        </RadzenDropDown>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Descripción</label>
                        <RadzenTextBox @bind-Value="productoEdicion.descripcion_producto" class="w-100" Multiline="true" Rows="3"></RadzenTextBox>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Notas</label>
                        <RadzenTextBox @bind-Value="productoEdicion.notas_producto" class="w-100" Multiline="true" Rows="5"></RadzenTextBox>
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-end mt-3">
                <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Secondary" Click="@(() => ds.Close(false))" class="me-2"></RadzenButton>
                <RadzenButton Text="Guardar" ButtonStyle="ButtonStyle.Primary" Click="@(() => GuardarDesdeDialog(productoEdicion, ds))"></RadzenButton>
            </div>
        </RadzenStack>
        , new DialogOptions()
        {
            Draggable = true,
            ShowClose = true,
            Resizable = true,
            Width = "800px",
            Height = "500px"
        });

        if (result == true)
        {
            ActualizarTabla();
        }
    }

    protected async Task GuardarDesdeDialog(producto producto, DialogService ds)
    {
        producto resultado;
        if (producto.id_producto == 0)
        {
            resultado = await productoManager.Agregar(producto);
        }
        else
        {
            resultado = await productoManager.Modificar(producto);
        }

        if (resultado != null)
        {
            ds.Close(true);
            ActualizarTabla();
        }
        else
        {
            await dialogService.Alert(productoManager.Error, "Error al guardar");
        }
    }

    protected async Task Eliminar(producto producto)
    {
        var r = await dialogService.Confirm($"¿Deseas eliminar el producto {producto.nombre_producto}?", "Advertencia",
            new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" });

        if (r.Value)
        {
            var eliminado = await productoManager.Eliminar(producto.id_producto);
            if (eliminado)
            {
                Console.WriteLine("Producto eliminado exitosamente");
                ActualizarTabla();
            }
            else
            {
                Console.WriteLine($"No se pudo eliminar: {productoManager.Error}");
                await dialogService.Alert(productoManager.Error, "Error al eliminar");
            }
        }
    }
}
