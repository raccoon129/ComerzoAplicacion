@page "/inventario"
@using COMMON.Entidades
@using BIZ
@using COMMON.Validadores
@using Radzen
@inject DialogService dialogService
@inject NotificationService notificationService

<h3>Catálogo de Inventario</h3>
<br />
@if (cargando)
{
    <RadzenProgressBar Value="100" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px; width: 100%;" />
}
else
{
    <RadzenButton Text="Agregar Movimiento" ButtonStyle="ButtonStyle.Success" Click="@(() => Editar(new inventario()))"></RadzenButton>
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" 
                   FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" 
                   PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                   Data="@movimientos" ColumnWidth="auto" LogicalFilterOperator="LogicalFilterOperator.Or" 
                   TItem="inventario" SortOrder="SortOrder.Descending" SortField="fecha_movimiento">

        <Columns>
            <RadzenDataGridColumn TItem="inventario" Property="fecha_movimiento" Title="Fecha" Width="150px" 
                                  FormatString="{0:dd/MM/yyyy HH:mm}" SortOrder="SortOrder.Descending" />
            <RadzenDataGridColumn TItem="inventario" Property="id_producto" Title="Producto" Width="200px">
                <Template Context="data">
                    @ObtenerNombreProducto(data.id_producto)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="inventario" Property="tipo_movimiento" Title="Tipo" Width="100px" TextAlign="TextAlign.Center">
                <Template Context="data">
                    @if (data.tipo_movimiento == "entrada")
                    {
                        <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="Entrada" />
                    }
                    else
                    {
                        <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="Salida" />
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="inventario" Property="cantidad_movimiento" Title="Cantidad" Width="90px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="inventario" Property="descripcion_movimiento" Title="Descripción" Width="250px" />
            <RadzenDataGridColumn TItem="inventario" Property="id_movimiento" Title="ID" Width="60px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="inventario" Title="Acciones" Width="80px" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <RadzenButton Click="@(() => Editar(data))" ButtonStyle="ButtonStyle.Warning" Icon="edit" Size="ButtonSize.Small"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
<br />
<br />

@code 
{
    InventarioManager inventarioManager;
    ProductoManager productoManager;
    List<inventario> movimientos;
    List<producto> productos;
    private bool cargando = false;

    Dictionary<string, string> tiposMovimiento;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        inventarioManager = new InventarioManager(new inventarioValidator(), new ProductoManager(new productoValidator()));
        productoManager = new ProductoManager(new productoValidator());

        tiposMovimiento = new Dictionary<string, string>();
        tiposMovimiento.Add("entrada", "Entrada");
        tiposMovimiento.Add("salida", "Salida");

        ActualizarTabla();
    }

    protected async void ActualizarTabla()
    {
        cargando = true;
        movimientos = await inventarioManager.ObtenerTodos();
        productos = await productoManager.ObtenerTodos();
        
        // Ordenamos los movimientos por fecha de forma descendente
        if (movimientos != null)
        {
            movimientos = movimientos.OrderByDescending(m => m.fecha_movimiento).ToList();
        }
        
        cargando = false;
        await InvokeAsync(StateHasChanged);
    }

    private string ObtenerNombreProducto(int idProducto)
    {
        var producto = productos?.FirstOrDefault(p => p.id_producto == idProducto);
        return producto != null ? producto.nombre_producto : $"Producto {idProducto}";
    }

    protected async Task Editar(inventario movimiento)
    {
        string titulo = movimiento.id_movimiento == 0 ? "Nuevo Movimiento" : $"Editar Movimiento #{movimiento.id_movimiento}";

        // Creamos una copia local para trabajar en el diálogo
        var movimientoEdicion = new inventario
        {
            id_movimiento = movimiento.id_movimiento,
            id_producto = movimiento.id_producto,
            cantidad_movimiento = movimiento.cantidad_movimiento,
            tipo_movimiento = movimiento.tipo_movimiento,
            fecha_movimiento = movimiento.fecha_movimiento != DateTime.MinValue ? movimiento.fecha_movimiento : DateTime.Now,
            descripcion_movimiento = movimiento.descripcion_movimiento
        };

        var result = await dialogService.OpenAsync(titulo, ds => @<RadzenStack Gap="1.5rem">

            <div class="row">
                <div class="col-6">Producto</div>
                <div class="col-3">Cantidad</div>
                <div class="col-3">Tipo</div>
            </div>
            <div class="row">
                <div class="col-6">
                    <RadzenDropDown @bind-Value="movimientoEdicion.id_producto" Data="@productos"
                                    TValue="int" TextProperty="nombre_producto" ValueProperty="id_producto" class="w-100" />
                </div>
                <div class="col-3">
                    <RadzenNumeric @bind-Value="movimientoEdicion.cantidad_movimiento" TValue="int" class="w-100" Min="1" />
                </div>
                <div class="col-3">
                    <RadzenDropDown @bind-Value="movimientoEdicion.tipo_movimiento" Data="@tiposMovimiento"
                                    TValue="string" TextProperty="Value" ValueProperty="Key" class="w-100" />
                </div>
            </div>

            <div class="row">
                <div class="col-6">Fecha</div>
                <div class="col-6">Descripción</div>
            </div>
            <div class="row">
                <div class="col-6">
                    <RadzenDatePicker @bind-Value="movimientoEdicion.fecha_movimiento" class="w-100" ShowTime="true" />
                </div>
                <div class="col-6">
                    <RadzenTextBox @bind-Value="movimientoEdicion.descripcion_movimiento" class="w-100" />
                </div>
            </div>

            <div class="row">
                <div class="col-6"></div>
                <div class="col-3">
                    <RadzenButton Text="Guardar" ButtonStyle="ButtonStyle.Primary"
                                  Click="@(() => GuardarDesdeDialog(movimientoEdicion, ds))"></RadzenButton>
                </div>
                <div class="col-3">
                    <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Secondary"
                                  Click="@(() => ds.Close(false))"></RadzenButton>
                </div>
            </div>

        </RadzenStack>
        , new DialogOptions()
        {
            Draggable = true,
            ShowClose = true,
            Resizable = true,
            Width = "700px",
            Height = "400px"
        });

        if (result == true)
        {
            ActualizarTabla();
        }
    }

    protected async Task GuardarDesdeDialog(inventario movimiento, DialogService ds)
    {
        inventario resultado;
        bool esNuevo = movimiento.id_movimiento == 0;
        string nombreProducto = ObtenerNombreProducto(movimiento.id_producto);
        string tipoMovimiento = movimiento.tipo_movimiento == "entrada" ? "entrada" : "salida";

        if (esNuevo)
        {
            resultado = await inventarioManager.Agregar(movimiento);
        }
        else
        {
            resultado = await inventarioManager.Modificar(movimiento);
        }

        if (resultado != null)
        {
            ds.Close(true);
            ActualizarTabla();

            // Mostrar notificación de éxito
            string mensaje = esNuevo
                ? $"Movimiento de {tipoMovimiento} registrado para '{nombreProducto}'"
                : $"Movimiento #{resultado.id_movimiento} actualizado correctamente";

            NotificationSeverity severidad = movimiento.tipo_movimiento == "entrada" ? 
                NotificationSeverity.Success : NotificationSeverity.Info;

            notificationService.Notify(new NotificationMessage
            {
                Severity = severidad,
                Summary = esNuevo ? "Movimiento registrado" : "Movimiento actualizado",
                Detail = mensaje,
                Duration = 4000
            });
        }
        else
        {
            // Mostrar notificación de error junto con el diálogo de alerta
            notificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = inventarioManager.Error,
                Duration = 6000
            });

            await dialogService.Alert(inventarioManager.Error, "Error al guardar");
        }
    }
    
}