@page "/cliente"
@using COMMON.Entidades
@using BIZ
@using COMMON.Validadores
@using Radzen
@inject DialogService dialogService
@inject NotificationService notificationService

<h3>Catálogo de Clientes</h3>

<br />

@if (cargando)
{
    <RadzenProgressBar Value="100" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px; width: 100%;" />
}
else
{
    <RadzenButton Text="Agregar" ButtonStyle="ButtonStyle.Success" Click="@(() => Editar(new cliente()))"></RadzenButton>

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@clientes" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">

        <Columns>
            <RadzenDataGridColumn Property="id_cliente" Title="ID" Width="50px" />
            <RadzenDataGridColumn Property="nombre_cliente" Title="Nombre" Width="150px" />
            <RadzenDataGridColumn Property="telefono_cliente" Title="Teléfono" Width="100px" />
            <RadzenDataGridColumn Property="direccion_cliente" Title="Dirección" Width="200px" />
            <RadzenDataGridColumn Title="Acciones">
                <Template Context="data">
                    <RadzenButton Click="@(() => Editar(data))" ButtonStyle="ButtonStyle.Warning" Icon="edit" Size="ButtonSize.Small" />
                    <RadzenButton Click="@(() => Eliminar(data))" ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" class="ms-1" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
<br />
<br />

@code {
    ClienteManager clienteManager;
    List<cliente> clientes;
    private bool cargando = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        clienteManager = new ClienteManager(new clienteValidator());
        ActualizarTabla();
    }

    protected async void ActualizarTabla()
    {
        cargando = true;
        clientes = await clienteManager.ObtenerTodos();
        cargando = false;
        await InvokeAsync(StateHasChanged);
    }

    protected async Task Editar(cliente cliente)
    {
        string titulo = cliente.id_cliente == 0 ? "Nuevo Cliente" : $"Editar {cliente.nombre_cliente}";
        
        // Creamos una copia local para trabajar en el diálogo
        var clienteEdicion = new cliente
        {
            id_cliente = cliente.id_cliente,
            nombre_cliente = cliente.nombre_cliente,
            telefono_cliente = cliente.telefono_cliente,
            direccion_cliente = cliente.direccion_cliente
        };

        var result = await dialogService.OpenAsync(titulo, ds => @<RadzenStack Gap="1.5rem">

            <div class="row">
                <div class="col-12">Nombre del Cliente</div>
            </div>
            <div class="row">
                <div class="col-12"><RadzenTextBox @bind-Value="clienteEdicion.nombre_cliente" class="w-100"></RadzenTextBox></div>
            </div>

            <div class="row">
                <div class="col-6">Teléfono</div>
                <div class="col-6">Dirección</div>
            </div>
            <div class="row">
                <div class="col-6"><RadzenTextBox @bind-Value="clienteEdicion.telefono_cliente" class="w-100"></RadzenTextBox></div>
                <div class="col-6"><RadzenTextBox @bind-Value="clienteEdicion.direccion_cliente" class="w-100"></RadzenTextBox></div>
            </div>

            <div class="row">
                <div class="col-6"></div>
                <div class="col-3">
                    <RadzenButton Text="Guardar" ButtonStyle="ButtonStyle.Primary"
                                  Click="@(() => GuardarDesdeDialog(clienteEdicion, ds))"></RadzenButton>
                </div>
                <div class="col-3">
                    <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Secondary"
                                  Click="@(() => ds.Close(false))"></RadzenButton>
                </div>
            </div>

        </RadzenStack>
        , new DialogOptions()
        {
            Draggable = true,
            ShowClose = true,
            Resizable = true,
            Width = "700px",
            Height = "400px"
        });

        if (result == true)
        {
            ActualizarTabla();
        }
    }

    protected async Task GuardarDesdeDialog(cliente cliente, DialogService ds)
    {
        cliente resultado;
        bool esNuevo = cliente.id_cliente == 0;

        if (esNuevo)
        {
            resultado = await clienteManager.Agregar(cliente);
        }
        else
        {
            resultado = await clienteManager.Modificar(cliente);
        }

        if (resultado != null)
        {
            ds.Close(true);
            ActualizarTabla();
            
            // Mostrar notificación de éxito
            string mensaje = esNuevo 
                ? $"Cliente '{resultado.nombre_cliente}' registrado correctamente" 
                : $"Cliente '{resultado.nombre_cliente}' actualizado correctamente";
            
            notificationService.Notify(new NotificationMessage { 
                Severity = NotificationSeverity.Success,
                Summary = esNuevo ? "Cliente registrado" : "Cliente actualizado",
                Detail = mensaje,
                Duration = 4000
            });
        }
        else
        {
            // Mostrar notificación de error junto con el diálogo de alerta
            notificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = clienteManager.Error,
                Duration = 6000
            });
            
            await dialogService.Alert(clienteManager.Error, "Error al guardar");
        }
    }

    protected async Task Eliminar(cliente cliente)
    {
        var r = await dialogService.Confirm($"¿Deseas eliminar al cliente {cliente.nombre_cliente}?", "Advertencia",
            new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" });

        if (r.Value)
        {
            var eliminado = await clienteManager.Eliminar(cliente.id_cliente);
            if (eliminado)
            {
                // Mostrar notificación de éxito
                notificationService.Notify(new NotificationMessage {
                    Severity = NotificationSeverity.Success,
                    Summary = "Cliente eliminado",
                    Detail = $"El cliente '{cliente.nombre_cliente}' ha sido eliminado correctamente",
                    Duration = 4000
                });
                
                ActualizarTabla();
            }
            else
            {
                // Mostrar notificación de error
                notificationService.Notify(new NotificationMessage {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al eliminar",
                    Detail = clienteManager.Error,
                    Duration = 6000
                });
                
                await dialogService.Alert(clienteManager.Error, "Error al eliminar");
            }
        }
    }
}