@page "/reportes"
@using COMMON.Entidades
@using BIZ
@using COMMON.Validadores
@using Radzen
@using Radzen.Blazor
@using System.Linq
@inject NotificationService NotificationService
@inject DialogService DialogService

<PageTitle>Reportes de Ventas</PageTitle>

<div class="container">
    <h3 class="mb-4">Reportes</h3>


    @if (cargando)
    {
        <RadzenProgressBar Value="100" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
    }
    else
    {
            <div class="row mb-4">
        <div class="col-md-6 mb-3">
            <h5>Periodo de análisis</h5>
            <div class="d-flex align-items-center">
                <RadzenDatePicker @bind-Value="fechaInicio" DateFormat="dd/MM/yyyy" Class="me-2" />
                <span>hasta</span>
                <RadzenDatePicker @bind-Value="fechaFin" DateFormat="dd/MM/yyyy" Class="ms-2 me-2" />
                <RadzenButton Icon="search" Click="@CargarDatos" ButtonStyle="ButtonStyle.Primary" />
            </div>
        </div>
        <div class="col-md-6 mb-3">
            <h6><strong>Resumen</strong></h6>
            <div class="d-flex flex-column">
                <div class="d-flex justify-content-between">
                    <span>Ventas en período:</span>
                    <strong>@cantidadVentas</strong>
                </div>
                <div class="d-flex justify-content-between">
                    <span>Total vendido:</span>
                    <strong>@totalVentas.ToString("C")</strong>
                </div>
                <div class="d-flex justify-content-between">
                    <span>Promedio por venta:</span>
                    <strong>@(cantidadVentas > 0 ? (totalVentas / cantidadVentas).ToString("C") : "$0.00")</strong>
                </div>
            </div>
        </div>
    </div>

        <div class="row">
            <!-- Ventas diarias en el periodo -->
            <div class="col-md-6 mb-4">
                <RadzenCard class="h-100">
                    <RadzenText TextStyle="TextStyle.H6">Ventas diarias</RadzenText>
                    @if (ventasPorDia.Any())
                    {
                        <RadzenChart>
                            <RadzenColumnSeries Data="@ventasPorDia" CategoryProperty="Fecha" ValueProperty="Total" Title="Ventas" />
                            <RadzenValueAxis>
                                <RadzenGridLines Visible="true" />
                                <RadzenAxisTitle Text="Monto Total" />
                            </RadzenValueAxis>
                            <RadzenCategoryAxis>
                                <RadzenGridLines Visible="false" />
                                <RadzenAxisTitle Text="Fecha" />
                            </RadzenCategoryAxis>
                        </RadzenChart>
                    }
                    else
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="true" AllowClose="false">
                            No hay datos de ventas en este período.
                        </RadzenAlert>
                    }
                </RadzenCard>
            </div>

            <!-- Productos más vendidos -->
            <div class="col-md-6 mb-4">
                <RadzenCard class="h-100">
                    <RadzenText TextStyle="TextStyle.H6">Top 5 Productos Más Vendidos</RadzenText>
                    @if (productosMasVendidos.Any())
                    {
                        <RadzenChart>
                            <RadzenDonutSeries Data="@productosMasVendidos" CategoryProperty="Nombre" ValueProperty="Cantidad">
                                <RadzenSeriesDataLabels Visible="true" />
                            </RadzenDonutSeries>
                        </RadzenChart>
                    }
                    else
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="true" AllowClose="false">
                            No hay datos de productos vendidos en este período.
                        </RadzenAlert>
                    }
                </RadzenCard>
            </div>

            <!-- Inventario en estado crítico -->
            <div class="col-md-6 mb-4">
                <RadzenCard class="h-100">
                    <div class="d-flex justify-content-between mb-2">
                        <RadzenText TextStyle="TextStyle.H6">Inventario en Estado Crítico</RadzenText>
                       
                    </div>
                    @if (productosBajoStock.Any())
                    {
                        <div class="product-list">
                            @foreach (var producto in productosBajoStock)
                            {
                                <div class="product-item d-flex justify-content-between align-items-center mb-2">
                                    <div>
                                        <strong>@producto.nombre_producto</strong>
                                        <small class="d-block text-danger">Stock: @producto.stock_producto</small>
                                    </div>
                                    <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="Crítico" />
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Success" ShowIcon="true" AllowClose="false">
                            No hay productos con inventario crítico.
                        </RadzenAlert>
                    }
                </RadzenCard>
            </div>

            <!-- Rendimiento de Ventas -->
            <div class="col-md-6 mb-4">
                <RadzenCard class="h-100">
                    <RadzenText TextStyle="TextStyle.H6">Rendimiento de Ventas</RadzenText>
                    @if (rendimientoVentas.Any())
                    {
                        <RadzenDataGrid AllowFiltering="false" AllowPaging="true" AllowSorting="true" 
                            Data="@rendimientoVentas" TItem="ProductoRendimiento" PageSize="5">
                            <Columns>
                                <RadzenDataGridColumn TItem="ProductoRendimiento" Property="Nombre" Title="Producto" />
                                <RadzenDataGridColumn TItem="ProductoRendimiento" Property="CantidadVendida" Title="Cantidad" Width="90px" />
                                <RadzenDataGridColumn TItem="ProductoRendimiento" Property="TotalVendido" Title="Total" Width="120px" FormatString="{0:C}" />
                                <RadzenDataGridColumn TItem="ProductoRendimiento" Property="PorcentajeTotal" Title="%" Width="70px" FormatString="{0}%" />
                            </Columns>
                        </RadzenDataGrid>
                    }
                    else
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="true" AllowClose="false">
                            No hay datos de rendimiento de ventas en este período.
                        </RadzenAlert>
                    }
                </RadzenCard>
            </div>
        </div>
    }
</div>

@code {
    // Managers
    private VentaManager _ventaManager;
    private VentaDetalleManager _ventaDetalleManager;
    private ProductoManager _productoManager;

    // Control de estado
    private bool cargando = false;
    private DateTime fechaInicio = DateTime.Today.AddDays(-30);
    private DateTime fechaFin = DateTime.Today;

    // Datos para reportes
    private int cantidadVentas = 0;
    private decimal totalVentas = 0;
    private List<VentaDiaria> ventasPorDia = new List<VentaDiaria>();
    private List<ProductoVendido> productosMasVendidos = new List<ProductoVendido>();
    private List<producto> productosBajoStock = new List<producto>();
    private List<ProductoRendimiento> rendimientoVentas = new List<ProductoRendimiento>();

    // Clases para los reportes
    public class VentaDiaria
    {
        public string Fecha { get; set; }
        public decimal Total { get; set; }
    }

    public class ProductoVendido
    {
        public string Nombre { get; set; }
        public int Cantidad { get; set; }
    }

    public class ProductoRendimiento
    {
        public string Nombre { get; set; }
        public int CantidadVendida { get; set; }
        public decimal TotalVendido { get; set; }
        public int PorcentajeTotal { get; set; }
    }

    protected override void OnInitialized()
    {
        // Inicializar managers
        var productoValidator = new productoValidator();
        var ventaValidator = new ventaValidator();
        var ventaDetalleValidator = new ventaDetalleValidator();

        _productoManager = new ProductoManager(productoValidator);
        var inventarioValidator = new inventarioValidator();
        var inventarioManager = new InventarioManager(inventarioValidator, _productoManager);
        _ventaManager = new VentaManager(ventaValidator, inventarioManager);
        _ventaDetalleManager = new VentaDetalleManager(ventaDetalleValidator, _productoManager, inventarioManager);
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        cargando = true;
        try
        {
            // Obtener resumen de ventas por periodo
            var resumenVentas = await _ventaManager.ObtenerResumenVentasPorPeriodo(fechaInicio, fechaFin);
            cantidadVentas = resumenVentas.CantidadVentas;
            totalVentas = resumenVentas.MontoTotal;

            // Obtener ventas diarias
            await CargarVentasDiarias();
            
            // Obtener productos más vendidos
            await CargarProductosMasVendidos();
            
            // Obtener productos con bajo stock
            await CargarProductosBajoStock();
            
            // Obtener rendimiento de ventas
            await CargarRendimientoVentas();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error al cargar datos: {ex.Message}");
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarVentasDiarias()
    {
        try
        {
            // Usar el método del VentaManager para obtener ventas diarias
            var ventasDiarias = await _ventaManager.ObtenerVentasDiariasPorPeriodo(fechaInicio, fechaFin);
            
            // Convertir al formato requerido por el gráfico
            ventasPorDia = ventasDiarias.Select(v => new VentaDiaria 
            {
                Fecha = v.Fecha,
                Total = v.Total
            }).ToList();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error al cargar ventas diarias: {ex.Message}");
            ventasPorDia = new List<VentaDiaria>();
        }
    }

    private async Task CargarProductosMasVendidos()
    {
        try
        {
            // Usar el método del VentaDetalleManager para productos populares en periodo
            var productosPopulares = await _ventaDetalleManager.ObtenerProductosPopularesPorPeriodo(
                fechaInicio, fechaFin, _ventaManager, _productoManager, 5);
            
            // Convertir al formato requerido por el gráfico
            productosMasVendidos = productosPopulares.Select(p => new ProductoVendido 
            {
                Nombre = p.Nombre,
                Cantidad = p.Cantidad
            }).ToList();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error al cargar productos más vendidos: {ex.Message}");
            productosMasVendidos = new List<ProductoVendido>();
        }
    }

    private async Task CargarProductosBajoStock()
    {
        try
        {
            // Usar el método del ProductoManager para obtener productos con stock bajo
            productosBajoStock = await _productoManager.ObtenerProductosBajoStock(5);
            
            if (productosBajoStock == null)
            {
                productosBajoStock = new List<producto>();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error al cargar productos con bajo stock: {ex.Message}");
            productosBajoStock = new List<producto>();
        }
    }

    private async Task CargarRendimientoVentas()
    {
        try
        {
            // Usar el método del VentaDetalleManager para obtener rendimiento de ventas
            var datosRendimiento = await _ventaDetalleManager.ObtenerRendimientoVentasPorPeriodo(
                fechaInicio, fechaFin, _ventaManager, _productoManager);
            
            // Convertir al formato requerido por el grid
            rendimientoVentas = datosRendimiento.Select(r => new ProductoRendimiento 
            {
                Nombre = r.Nombre,
                CantidadVendida = r.CantidadVendida,
                TotalVendido = r.TotalVendido,
                PorcentajeTotal = r.PorcentajeTotal
            }).ToList();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error al cargar rendimiento de ventas: {ex.Message}");
            rendimientoVentas = new List<ProductoRendimiento>();
        }
    }
}