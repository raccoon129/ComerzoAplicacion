@page "/venta/historial"
@using COMMON
@using COMMON.Entidades
@inject DialogService DialogService
@inject NotificationService NotificationService



<PageTitle>Historial de Ventas</PageTitle>

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Historial de Ventas</h2>
        
        <!-- Filtros de búsqueda para el historial -->
        <div class="d-flex">
            <RadzenDatePicker @bind-Value=@fechaDesde Placeholder="Desde" Class="me-2" />
            <RadzenDatePicker @bind-Value=@fechaHasta Placeholder="Hasta" Class="me-2" />
            <RadzenButton Text="Filtrar" Icon="search" Click=@FiltrarVentas ButtonStyle="ButtonStyle.Secondary" />
        </div>
    </div>

    <div class="mb-4">
        @if (cargando)
        {
            <RadzenProgressBar Value="100" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
        }
        else if (ventasFiltradas != null && ventasFiltradas.Any())
        {
            <RadzenDataGrid Data="@ventasFiltradas" TItem="venta" AllowPaging="true" PageSize="10"
                           AllowSorting="true" AllowFiltering="true">
                <Columns>
                    <RadzenDataGridColumn TItem="venta" Property="id_venta" Title="ID" Width="70px" />
                    <RadzenDataGridColumn TItem="venta" Property="fecha_hora_venta" Title="Fecha" FormatString="{0:dd/MM/yyyy HH:mm}" />
                    <RadzenDataGridColumn TItem="venta" Property="usuario_alta" Title="Vendedor" />
                    <RadzenDataGridColumn TItem="venta" Property="id_cliente" Title="ID Cliente" />
                    <RadzenDataGridColumn TItem="venta" Property="monto_total_venta" Title="Total" FormatString="{0:C}" />
                    <RadzenDataGridColumn TItem="venta" Title="Acciones" Sortable="false" Filterable="false" Width="150px">
                        <Template Context="data">
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="visibility" Size="ButtonSize.Small"
                                          Click="@(() => VerDetalleVenta(data))" Text="Detalles" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            
            <!-- Resumen de ventas -->
            <div class="card mt-4">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <h6>Total ventas: <span class="text-primary">@ventasFiltradas.Count</span></h6>
                        </div>
                        <div class="col-md-4">
                            <h6>Monto total: <span class="text-primary">@ventasFiltradas.Sum(v => v.monto_total_venta).ToString("C")</span></h6>
                        </div>
                        <div class="col-md-4">
                            <h6>Promedio: <span class="text-primary">@(ventasFiltradas.Any() ? (ventasFiltradas.Sum(v => v.monto_total_venta) / ventasFiltradas.Count).ToString("C") : "$0.00")</span></h6>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-info">No hay ventas que coincidan con los criterios de búsqueda.</div>
        }
    </div>
</div>

@code {
    private bool cargando = false;
    private List<venta> ultimasVentas = new List<venta>();
    private List<venta> todasLasVentas = new List<venta>();
    private List<venta> ventasFiltradas = new List<venta>();
    private DateTime? fechaDesde = DateTime.Today.AddDays(-30); // Último mes por defecto
    private DateTime? fechaHasta = DateTime.Today;
    
    // Instancias locales de managers
    private ProductoManager _productoManager;
    private VentaManager _ventaManager;
    private VentaDetalleManager _ventaDetalleManager;
    private InventarioManager _inventarioManager;

    protected override void OnInitialized()
    {
        // Crear validadores temporales para los managers
        var productoValidator = new DummyValidator<producto>();
        var ventaValidator = new DummyValidator<venta>();
        var ventaDetalleValidator = new DummyValidator<venta_detalle>();
        var inventarioValidator = new DummyValidator<inventario>();
        
        // Inicializar los managers en el orden correcto (dependencias primero)
        _productoManager = new ProductoManager(productoValidator);
        _inventarioManager = new InventarioManager(inventarioValidator, _productoManager);
        _ventaManager = new VentaManager(ventaValidator, _inventarioManager);
        _ventaDetalleManager = new VentaDetalleManager(ventaDetalleValidator, _productoManager, _inventarioManager);
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarUltimasVentas();
        await CargarVentas();
    }

    private async Task CargarUltimasVentas()
    {
        cargando = true;
        try
        {
            var ventas = await _ventaManager.ObtenerTodos();
            if (ventas != null)
            {
                ultimasVentas = ventas
                    .OrderByDescending(v => v.fecha_hora_venta)
                    .Take(10)
                    .ToList();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", _ventaManager.Error);
            }
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarVentas()
    {
        cargando = true;
        try
        {
            todasLasVentas = await _ventaManager.ObtenerTodos() ?? new List<venta>();
            
            // Aplicar filtros iniciales
            AplicarFiltros();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error al cargar ventas: {ex.Message}");
            ventasFiltradas = new List<venta>();
        }
        finally
        {
            cargando = false;
        }
    }

    private void AplicarFiltros()
    {
        ventasFiltradas = todasLasVentas.Where(v => 
            (!fechaDesde.HasValue || v.fecha_hora_venta.Date >= fechaDesde.Value.Date) &&
            (!fechaHasta.HasValue || v.fecha_hora_venta.Date <= fechaHasta.Value.Date)
        )
        .OrderByDescending(v => v.fecha_hora_venta)
        .ToList();
    }

    private async Task FiltrarVentas()
    {
        cargando = true;
        try
        {
            AplicarFiltros();
        }
        finally
        {
            cargando = false;
        }
    }


    private async Task VerDetalleVenta(venta venta)
    {
        var parameters = new Dictionary<string, object>
        {
            { "IdVenta", venta.id_venta },
            { "VentaManager", _ventaManager },
            { "VentaDetalleManager", _ventaDetalleManager },
            { "ProductoManager", _productoManager }
        };

        await DialogService.OpenAsync<DetalleVentaComponent>("Detalle de Venta", parameters);
    }

    // Validador dummy para inicializar los managers sin DI
    public class DummyValidator<T> : FluentValidation.AbstractValidator<T>
    {
        public DummyValidator()
        {
            // Validador vacío para instanciar los managers
        }
    }
}