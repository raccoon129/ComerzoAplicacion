@page "/dashboard"
@inject NotificationService NotificationService

<PageTitle>Dashboard</PageTitle>

<div class="container">
    <h2 class="text-center mb-4">Tu resumen del día</h2>

    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            Resumen del día
        </div>
        <div class="card-body bg-light">
            <div class="row">
                <div class="col">
                    <h5>Ventas de hoy:</h5>
                </div>
                <div class="col text-end">
                    <h5>@totalVentasDia.ToString("C")</h5>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h5>Productos vendidos:</h5>
                </div>
                <div class="col text-end">
                    <h5>@totalProductosVendidos</h5>
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header bg-success text-white">
            Productos populares
        </div>
        <div class="card-body">
            @if (productosPopulares.Any())
            {
                <div class="list-group">
                    @foreach (var producto in productosPopulares)
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="mb-0">@producto.Nombre</h6>
                                <small>Vendidos hoy: @producto.Cantidad</small>
                            </div>
                            <span class="badge bg-success rounded-pill">+@producto.PorcentajeVentas%</span>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-info">No hay ventas registradas hoy.</div>
            }
        </div>
    </div>

    <div class="card">
        <div class="card-header bg-danger text-white">
            Inventario bajo
        </div>
        <div class="card-body">
            @if (productosBajoStock.Any())
            {
                <div class="list-group">
                    @foreach (var producto in productosBajoStock)
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="mb-0">@producto.nombre_producto</h6>
                                <small class="text-danger">Quedan @producto.stock_producto unidades</small>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-info">No hay productos con bajo stock.</div>
            }
        </div>
    </div>
</div>

@code {
    private decimal totalVentasDia = 0;
    private int totalProductosVendidos = 0;
    private List<ProductoPopular> productosPopulares = new List<ProductoPopular>();
    private List<producto> productosBajoStock = new List<producto>();
    
    // Instancias locales de managers
    private VentaManager _ventaManager;
    private ProductoManager _productoManager;
    private InventarioManager _inventarioManager;
    
    private class ProductoPopular
    {
        public string Nombre { get; set; }
        public int Cantidad { get; set; }
        public int PorcentajeVentas { get; set; }
    }

    protected override void OnInitialized()
    {
        // Crear validadores temporales para los managers
        var productoValidator = new DummyValidator<producto>();
        var ventaValidator = new DummyValidator<venta>();
        var inventarioValidator = new DummyValidator<inventario>();
        
        // Inicializar los managers
        _productoManager = new ProductoManager(productoValidator);
        _inventarioManager = new InventarioManager(inventarioValidator, _productoManager);
        _ventaManager = new VentaManager(ventaValidator, _inventarioManager);
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        await CargarResumenVentas();
        await CargarProductosPopulares();
        await CargarInventarioBajo();
    }

    private async Task CargarResumenVentas()
    {
        try
        {
            var ventasHoy = await _ventaManager.ObtenerVentasDelDia();
            
            if (ventasHoy != null)
            {
                totalVentasDia = ventasHoy.Sum(v => v.monto_total_venta);
                totalProductosVendidos = ventasHoy.Count;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error al cargar ventas: {ex.Message}");
        }
    }

    private async Task CargarProductosPopulares()
    {
        // Simulación de productos populares
        productosPopulares = new List<ProductoPopular>
        {
            new ProductoPopular { Nombre = "Granola Natural", Cantidad = 8, PorcentajeVentas = 25 },
            new ProductoPopular { Nombre = "Palanquetas de Amaranto", Cantidad = 6, PorcentajeVentas = 15 }
        };
    }

    private async Task CargarInventarioBajo()
    {
        try
        {
            var productos = await _productoManager.ObtenerTodos();
            
            if (productos != null)
            {
                // Consideramos bajo stock menos de 5 unidades
                productosBajoStock = productos.Where(p => p.stock_producto < 5).ToList();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error al cargar inventario: {ex.Message}");
        }
    }

    // Validador dummy para inicializar los managers sin DI
    public class DummyValidator<T> : FluentValidation.AbstractValidator<T>
    {
        public DummyValidator()
        {
            // Validador vacío para instanciar los managers
        }
    }
}