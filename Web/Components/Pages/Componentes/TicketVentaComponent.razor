@using COMMON.Entidades
@using Web.Components.Pages.Componentes
@using BIZ
@using COMMON.Validadores
@inject DialogService DialogService

<div class="container-fluid">
    <div class="card">
        <div class="card-body">
            <div class="text-center mb-4">
                @if (informacionComercio != null)
                {
                    <h3>@informacionComercio.nombre_comercio</h3>
                    @if (!string.IsNullOrEmpty(informacionComercio.razon_social))
                    {
                        <p>@informacionComercio.razon_social</p>
                    }
                    @if (!string.IsNullOrEmpty(informacionComercio.descripcion))
                    {
                        <small class="text-muted">@informacionComercio.descripcion</small>
                    }
                }
                else
                {
                    <h4>Ticket de Venta</h4>
                }
                <h5 class="text-muted mt-2">Venta #@IdVenta</h5>
                <p>@DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss")</p>
            </div>

            <div class="table-responsive mb-3">
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Producto</th>
                            <th class="text-center">Cant.</th>
                            <th class="text-end">P.Unit</th>
                            <th class="text-end">Subtotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ProductosVendidos)
                        {
                            <tr>
                                <td>@item.Producto.nombre_producto</td>
                                <td class="text-center">@item.Cantidad</td>
                                <td class="text-end">@item.Producto.precio_producto.ToString("C")</td>
                                <td class="text-end">@item.Subtotal.ToString("C")</td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <th colspan="3" class="text-end">Total:</th>
                            <th class="text-end">@TotalVenta.ToString("C")</th>
                        </tr>
                    </tfoot>
                </table>
            </div>

            <div class="text-center">
                <p>¡Gracias por su compra!</p>
                @if (informacionComercio != null && informacionComercio.fecha_creacion.Year > 2000)
                {
                    <small class="text-muted">Desde @informacionComercio.fecha_creacion.Year a su servicio</small>
                }
            </div>
        </div>
    </div>

    <div class="text-center mt-3">
        <RadzenButton Text="Imprimir" Icon="print" Click="@Imprimir" ButtonStyle="ButtonStyle.Primary" class="me-2" />
        <RadzenButton Text="Cerrar" Click="@Cerrar" ButtonStyle="ButtonStyle.Secondary" />
    </div>
</div>

@code {
    [Parameter] public int IdVenta { get; set; }
    [Parameter] public List<ModalNuevaVenta.ProductoSeleccionado> ProductosVendidos { get; set; }
    [Parameter] public decimal TotalVenta { get; set; }

    // Añadimos el manager de información del comercio
    private InformacionComercioManager _informacionComercioManager;
    private informacion_comercio informacionComercio;

    protected override void OnInitialized()
    {
        // Inicializamos el manager con su validador
        _informacionComercioManager = new InformacionComercioManager(new informacionComercioValidator());
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarInformacionComercio();
    }

    private async Task CargarInformacionComercio()
    {
        try
        {
            informacionComercio = await _informacionComercioManager.ObtenerInformacionComercio();
        }
        catch (Exception)
        {
            // si falla simplemente no se mostrará la información
            informacionComercio = null;
        }
    }

    private void Imprimir()
    {
        // Aquí se implementaría la lógica de impresión
    }

    private void Cerrar()
    {
        DialogService.Close();
    }
}