@using COMMON
@using COMMON.Entidades
@inject NotificationService NotificationService
@inject DialogService DialogService

<div class="container">
    <div class="row mb-4">
        <div class="col-md-6">
            <h3>Seleccionar Productos</h3>
            <RadzenAlert Text="Si busca un registro en específico, escriba y pulse enter." AlertStyle="AlertStyle.Info" />
            <div class="mb-3">
                <RadzenTextBox Placeholder="Buscar productos..." @bind-Value="@textoBusqueda" Change="@BuscarProductos"
                               class="w-100" />
            </div>
        </div>
        <div class="col-md-6 text-end align-self-end">
            <RadzenButton Icon="shopping_cart" Text="Finalizar Venta" ButtonStyle="ButtonStyle.Success"
                          Click="@FinalizarVenta" Disabled="@(!productosSeleccionados.Any() || isBusy)" />
            <RadzenButton Icon="cancel" Text="Cancelar" ButtonStyle="ButtonStyle.Light"
                          Click="@CancelarVenta" class="ms-2" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            @if (cargando)
            {
                <RadzenProgressBar Value="100" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
            }
            else if (!string.IsNullOrEmpty(textoBusqueda) && productosFiltrados?.Count > 0)
            {
                <div class="row">
                    @foreach (var producto in productosFiltrados)
                    {
                        <div class="col-md-6 col-lg-4 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">@producto.nombre_producto</h5>
                                    <p class="card-text text-truncate">@producto.descripcion_producto</p>
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="text-primary mb-0">$@producto.precio_producto.ToString("F2")</h6>
                                        <small class="text-muted">Stock: @producto.stock_producto</small>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="input-group" style="max-width: 120px;">
                                            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="remove"
                                                          Click="@(() => DisminuirCantidad(producto))" Disabled="@(!EstaEnSeleccionados(producto))" />
                                            <div class="form-control text-center">
                                                @ObtenerCantidadSeleccionada(producto.id_producto)
                                            </div>
                                            <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add"
                                                          Click="@(() => AgregarProducto(producto))"
                                                          Disabled="@(producto.stock_producto <= ObtenerCantidadSeleccionada(producto.id_producto))" />
                                        </div>
                                        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="info"
                                                      Click="@(() => VerDetalleProducto(producto))" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else if (!string.IsNullOrEmpty(textoBusqueda))
            {
                <RadzenAlert Text="No se encontraron productos con ese nombre" AlertStyle="AlertStyle.Info" AllowClose=false />
            }
            else if (todosLosProductos?.Count > 0)
            {
                <h5 class="mb-3">Productos disponibles</h5>
                
                <div class="row">
                    @foreach (var producto in todosLosProductosOrdenados)
                    {
                        <div class="col-md-6 col-lg-4 mb-3">
                            <RadzenCard class="h-100">
                                <div class="d-flex flex-column h-100">
                                    <h5 class="card-title mb-2">@producto.nombre_producto</h5>
                                    <p class="card-text text-truncate mb-2">@producto.descripcion_producto</p>
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="text-primary mb-0">$@producto.precio_producto.ToString("F2")</h6>
                                        <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@producto.stock_producto.ToString()" />
                                    </div>
                                    <div class="mt-auto">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="input-group" style="max-width: 120px;">
                                                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="remove"
                                                              Click="@(() => DisminuirCantidad(producto))" Disabled="@(!EstaEnSeleccionados(producto))" />
                                                <div class="form-control text-center">
                                                    @ObtenerCantidadSeleccionada(producto.id_producto)
                                                </div>
                                                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add"
                                                              Click="@(() => AgregarProducto(producto))"
                                                              Disabled="@(producto.stock_producto <= ObtenerCantidadSeleccionada(producto.id_producto))" />
                                            </div>
                                            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="info"
                                                          Click="@(() => VerDetalleProducto(producto))" />
                                        </div>
                                    </div>
                                </div>
                            </RadzenCard>
                        </div>
                    }
                </div>
            }
            else
            {
                <RadzenAlert Text="No hay productos seleccionados" AlertStyle="AlertStyle.Info" AllowClose=false />
            }
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Resumen de Venta</h5>
                </div>
                <div class="card-body">
                    @if (productosSeleccionados.Any())
                    {
                        <div class="table-responsive mb-3">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Producto</th>
                                        <th class="text-center">Cant.</th>
                                        <th class="text-end">Subtotal</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in productosSeleccionados)
                                    {
                                        <tr>
                                            <td>@item.Producto.nombre_producto</td>
                                            <td class="text-center">@item.Cantidad</td>
                                            <td class="text-end">@item.Subtotal.ToString("C")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="border-top pt-2">
                            <div class="d-flex justify-content-between">
                                <h5>Total:</h5>
                                <h5>@totalVenta.ToString("C")</h5>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span>Total productos:</span>
                                <span>@productosSeleccionados.Sum(p => p.Cantidad)</span>
                            </div>
                        </div>
                    }
                    else
                    {
                    <RadzenAlert Text="No hay productos seleccionados." AlertStyle="AlertStyle.Info" AllowClose=false />
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Recibir los managers como parámetros
    [Parameter] public ProductoManager ProductoManager { get; set; }
    [Parameter] public VentaManager VentaManager { get; set; }
    [Parameter] public VentaDetalleManager VentaDetalleManager { get; set; }
    [Parameter] public InventarioManager InventarioManager { get; set; }

    private string textoBusqueda = "";
    private List<producto> todosLosProductos = new List<producto>();
    private List<producto> productosFiltrados = new List<producto>();
    private List<ProductoSeleccionado> productosSeleccionados = new List<ProductoSeleccionado>();
    private bool cargando = false;
    private bool isBusy = false; // Propiedad para controlar el estado del botón
    private decimal totalVenta => productosSeleccionados.Sum(p => p.Subtotal);

    // Mostrar los productos ordenados por nombre en orden descendente
    private List<producto> todosLosProductosOrdenados => todosLosProductos
        .OrderByDescending(p => p.nombre_producto)
        .ToList();

    // Cambiamos la clase ProductoSeleccionado a pública para que sea accesible desde otros componentes
    public class ProductoSeleccionado
    {
        public producto Producto { get; set; }
        public int Cantidad { get; set; } = 0;
        public decimal Subtotal => Producto.precio_producto * Cantidad;
    }

    protected override async Task OnInitializedAsync()
    {
        if (ProductoManager == null)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "ProductoManager no ha sido inicializado.");
            return;
        }
            
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        cargando = true;
        try
        {
            todosLosProductos = await ProductoManager.ObtenerTodos();
            if (todosLosProductos == null)
            {
                todosLosProductos = new List<producto>();
                NotificationService.Notify(NotificationSeverity.Error, "Error", ProductoManager.Error);
            }

            // Filtrar solo productos con stock disponible
            todosLosProductos = todosLosProductos.Where(p => p.stock_producto > 0).ToList();
        }
        finally
        {
            cargando = false;
        }
    }

    private void BuscarProductos(string value)
    {
        textoBusqueda = value;
        
        if (string.IsNullOrEmpty(textoBusqueda))
        {
            productosFiltrados = new List<producto>();
            return;
        }

        productosFiltrados = todosLosProductos
            .Where(p => p.nombre_producto.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                        p.descripcion_producto.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase))
            .OrderByDescending(p => p.nombre_producto)
            .ToList();
    }

    private void AgregarProducto(producto producto)
    {
        var productoSeleccionado = productosSeleccionados
            .FirstOrDefault(p => p.Producto.id_producto == producto.id_producto);

        if (productoSeleccionado != null)
        {
            // No superar el stock disponible
            if (productoSeleccionado.Cantidad < producto.stock_producto)
            {
                productoSeleccionado.Cantidad++;
            }
        }
        else
        {
            productosSeleccionados.Add(new ProductoSeleccionado
            {
                Producto = producto,
                Cantidad = 1
            });
        }
    }

    private void DisminuirCantidad(producto producto)
    {
        var productoSeleccionado = productosSeleccionados
            .FirstOrDefault(p => p.Producto.id_producto == producto.id_producto);

        if (productoSeleccionado != null)
        {
            productoSeleccionado.Cantidad--;

            if (productoSeleccionado.Cantidad <= 0)
            {
                productosSeleccionados.Remove(productoSeleccionado);
            }
        }
    }

    private int ObtenerCantidadSeleccionada(int idProducto)
    {
        var productoSeleccionado = productosSeleccionados
            .FirstOrDefault(p => p.Producto.id_producto == idProducto);

        return productoSeleccionado?.Cantidad ?? 0;
    }

    private bool EstaEnSeleccionados(producto producto)
    {
        return productosSeleccionados.Any(p => p.Producto.id_producto == producto.id_producto);
    }

    private async Task VerDetalleProducto(producto producto)
    {
        var parameters = new Dictionary<string, object>
        {
            { "Producto", producto }
        };

        await DialogService.OpenAsync<DetalleProductoComponent>("Detalles de Producto", parameters);
    }

    /// <summary>
    /// Procesa y finaliza la venta actual.
    /// Este método sigue los siguientes pasos:
    /// 1. Crea un registro de 'venta' con la información general de la transacción.
    /// 2. Para cada producto seleccionado en la venta:
    ///    a. Registra un 'venta_detalle' con los datos específicos del producto vendido (cantidad, precio).
    ///    b. Llama a 'InventarioManager.RegistrarSalida' para:
    ///       i. Crear un movimiento de 'inventario' de tipo 'salida'.
    ///       ii. Actualizar el 'stock_producto' en la entidad 'producto', disminuyendo la cantidad vendida.
    /// 3. Muestra un ticket de venta resumen.
    /// 4. Cierra el modal de nueva venta.
    /// </summary>
    private async Task FinalizarVenta()
    {
        if (!productosSeleccionados.Any())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Selección vacía",
                "Seleccione al menos un producto para realizar la venta");
            return;
        }
        isBusy = true; // Deshabilitar el botón al inicio del proceso
        try
        {
            // Validar que todos los managers estén disponibles
            if (VentaManager == null || VentaDetalleManager == null || InventarioManager == null)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "No se han inicializado los managers correctamente");
                return;
            }

            // Paso 1: Crear la entidad 'venta'
            // Esta entidad representa la cabecera de la transacción.
            var nuevaVenta = new venta
            {
                fecha_hora_venta = DateTime.Now,
                monto_total_venta = totalVenta,

                //ESTE HAY QUE TRAERLO DE BIZ
                id_usuario = Params.UsuarioConectado != null ? 1 : 0 
                //id_usuario = BIZ.UsuarioConectado?.id_usuario ?? 0, // Asignar el ID del usuario conectado
            };

            // Guardar la venta en la base de datos.
            var ventaRegistrada = await VentaManager.Agregar(nuevaVenta);

            if (ventaRegistrada == null)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", $"No se pudo registrar la venta: {VentaManager.Error}");
                return;
            }

            // Paso 2: Registrar los detalles de la venta y actualizar el inventario para cada producto.
            foreach (var item in productosSeleccionados)
            {
                // Paso 2.a: Crear la entidad 'venta_detalle'.
                // Cada 'venta_detalle' corresponde a un ítem específico de la venta.
                var detalle = new venta_detalle
                {
                    id_venta = ventaRegistrada.id_venta, // Enlaza con la venta recién creada.
                    id_producto = item.Producto.id_producto,
                    cantidad_vendida = item.Cantidad,
                    precio_unitario_venta = item.Producto.precio_producto,
                    subtotal_detalle = item.Subtotal
                };

                // Guardar el detalle de la venta.
                // VentaDetalleManager.Agregar se encarga de las validaciones y de guardar el registro.
                // La lógica de actualización de inventario ya no reside en VentaDetalleManager.Agregar.
                var detalleRegistrado = await VentaDetalleManager.Agregar(detalle);

                if (detalleRegistrado == null)
                {
                    // Si falla el registro de un detalle, se registra el error y se continúa con los demás ítems.
                    // Considerar una estrategia de rollback o compensación si un detalle no se puede registrar.
                    Console.WriteLine($"Error al registrar detalle para producto ID {item.Producto.id_producto}: {VentaDetalleManager.Error}");
                    // Podría ser preferible abortar la venta si un detalle falla.
                    // NotificationService.Notify(NotificationSeverity.Error, "Error", $"No se pudo registrar el detalle para {item.Producto.nombre_producto}: {VentaDetalleManager.Error}");
                    // return; // Descomentar para abortar la venta completa si un detalle falla.
                }

                // Paso 2.b: Registrar la salida de inventario.
                // InventarioManager.RegistrarSalida se encarga de:
                // 1. Crear un registro en la tabla 'inventario' (movimiento de salida).
                // 2. Actualizar el 'stock_producto' en la tabla 'producto'.
                var resultadoSalida = await InventarioManager.RegistrarSalida(
                    item.Producto.id_producto,
                    item.Cantidad,
                    $"Venta #{ventaRegistrada.id_venta}" // Descripción para el movimiento de inventario.
                );

                if (resultadoSalida == null)
                {
                    // Si falla el registro de salida de inventario, notificar y considerar el impacto.
                    // El stock del producto podría no haberse actualizado correctamente.
                    Console.WriteLine($"Error al registrar salida de inventario para producto ID {item.Producto.id_producto}: {InventarioManager.Error}");
                    NotificationService.Notify(NotificationSeverity.Warning, "Advertencia de Inventario", 
                        $"No se pudo actualizar el inventario para {item.Producto.nombre_producto}: {InventarioManager.Error}. El stock podría ser incorrecto.");
                    // Dependiendo de la criticidad, se podría abortar la venta o continuar con advertencia.
                }
            }

            // Paso 3: Mostrar el ticket de venta.
            // Esto se hace después de que todos los detalles y movimientos de inventario se hayan procesado.
            await MostrarTicketVenta(ventaRegistrada.id_venta);

            // Paso 4: Cerrar el modal y, opcionalmente, devolver el ID de la venta.
            DialogService.Close(ventaRegistrada.id_venta);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error Crítico", $"Error inesperado al finalizar la venta: {ex.Message}");
        }
    }

    private async Task MostrarTicketVenta(int idVenta)
    {
        var parameters = new Dictionary<string, object>
        {
            { "IdVenta", idVenta },
            { "ProductosVendidos", productosSeleccionados }, // Pasa la lista de productos seleccionados para el ticket
            { "TotalVenta", totalVenta } // Pasa el total para el ticket
        };

        // Abre el componente TicketVentaComponent como un diálogo.
        await DialogService.OpenAsync<TicketVentaComponent>("Ticket de Venta", parameters);
    }

    private void CancelarVenta()
    {
        DialogService.Close();
    }
}